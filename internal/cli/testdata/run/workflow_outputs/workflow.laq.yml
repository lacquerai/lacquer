version: "1.0"
metadata:
  name: workflow-outputs
  description: Test workflow for complex output collection and templates
  author: lacquer-team

agents:
  data_agent:
    provider: anthropic
    model: claude-3-5-sonnet-20241022
    temperature: 0
    system_prompt: You are a data analysis assistant that provides structured responses.

workflow:
  inputs:
    data_source:
      type: string
      description: Source of data to analyze
      default: "user_metrics"
    
    analysis_type:
      type: string
      description: Type of analysis to perform
      default: "summary"

  state:
    processing_start_time: "{{ now() }}"
    analysis_results: []

  steps:
    - id: generate_sample_data
      run: |
        #!/bin/bash
        source="$1"
        echo "{
          \"dataset\": \"$source\",
          \"records\": [
            {\"id\": 1, \"value\": 100, \"category\": \"A\"},
            {\"id\": 2, \"value\": 200, \"category\": \"B\"},
            {\"id\": 3, \"value\": 150, \"category\": \"A\"},
            {\"id\": 4, \"value\": 300, \"category\": \"C\"}
          ],
          \"metadata\": {
            \"total_records\": 4,
            \"generated_at\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"source\": \"$source\"
          }
        }"
      with:
        source: "{{ inputs.data_source }}"
      outputs:
        dataset:
          type: string
          description: Dataset name
        records:
          type: array
          description: Data records
        metadata:
          type: object
          description: Dataset metadata

    - id: calculate_statistics
      run: |
        #!/bin/bash
        # Read the JSON data from environment or input
        records='[{"id": 1, "value": 100, "category": "A"}, {"id": 2, "value": 200, "category": "B"}, {"id": 3, "value": 150, "category": "A"}, {"id": 4, "value": 300, "category": "C"}]'
        
        # Simple calculations (in a real scenario, this would parse the JSON properly)
        total_value=750
        avg_value=187.5
        min_value=100
        max_value=300
        
        echo "{
          \"total_value\": $total_value,
          \"average_value\": $avg_value,
          \"min_value\": $min_value,
          \"max_value\": $max_value,
          \"record_count\": 4,
          \"categories\": [\"A\", \"B\", \"C\"],
          \"category_counts\": {\"A\": 2, \"B\": 1, \"C\": 1}
        }"
      outputs:
        total_value:
          type: number
          description: Sum of all values
        average_value:
          type: number
          description: Average value
        min_value:
          type: number
          description: Minimum value
        max_value:
          type: number
          description: Maximum value
        record_count:
          type: number
          description: Number of records
        categories:
          type: array
          description: List of categories
        category_counts:
          type: object
          description: Count of records per category

    - id: generate_insights
      agent: data_agent
      prompt: |
        Based on this data analysis:
        - Dataset: {{ steps.generate_sample_data.outputs.dataset }}
        - Total records: {{ steps.calculate_statistics.outputs.record_count }}
        - Average value: {{ steps.calculate_statistics.outputs.average_value }}
        - Value range: {{ steps.calculate_statistics.outputs.min_value }} to {{ steps.calculate_statistics.outputs.max_value }}
        - Categories: {{ steps.calculate_statistics.outputs.categories }}
        
        Please provide insights about this data in a structured format.
        Return your response as JSON with the following structure:
        {
          "summary": "Brief summary of the data",
          "key_insights": ["insight1", "insight2", "insight3"],
          "recommendations": ["rec1", "rec2"],
          "data_quality": "assessment of data quality"
        }
      outputs:
        summary:
          type: string
          description: Summary of the analysis
        key_insights:
          type: array
          description: Key insights from the data
        recommendations:
          type: array
          description: Recommendations based on analysis
        data_quality:
          type: string
          description: Assessment of data quality

    - id: finalize_processing
      action: update_state
      updates:
        processing_end_time: "{{ now() }}"
        analysis_results: "{{ steps.calculate_statistics.outputs }}"
        total_processing_time: "{{ state.processing_end_time - state.processing_start_time }}"

  outputs:
    # Simple outputs
    dataset_name: "{{ steps.generate_sample_data.outputs.dataset }}"
    record_count: "{{ steps.calculate_statistics.outputs.record_count }}"
    
    # Complex object outputs
    statistics: "{{ steps.calculate_statistics.outputs }}"
    insights: "{{ steps.generate_insights.outputs }}"
    source_metadata: "{{ steps.generate_sample_data.outputs.metadata }}"
    
    # Template-based outputs
    summary_text: "Dataset '{{ steps.generate_sample_data.outputs.dataset }}' contains {{ steps.calculate_statistics.outputs.record_count }} records with an average value of {{ steps.calculate_statistics.outputs.average_value }}"
    value_range: "{{ steps.calculate_statistics.outputs.min_value }}-{{ steps.calculate_statistics.outputs.max_value }}"
    
    # Array/list outputs
    all_categories: "{{ steps.calculate_statistics.outputs.categories }}"
    key_findings: "{{ steps.generate_insights.outputs.key_insights }}"
    
    # State-based outputs
    processing_info: {
      "start_time": "{{ state.processing_start_time }}",
      "end_time": "{{ state.processing_end_time }}",
      "duration": "{{ state.total_processing_time }}",
      "analysis_type": "{{ inputs.analysis_type }}"
    }
    
    # Complex nested output
    complete_analysis: {
      "dataset": {
        "name": "{{ steps.generate_sample_data.outputs.dataset }}",
        "source": "{{ inputs.data_source }}",
        "metadata": "{{ steps.generate_sample_data.outputs.metadata }}"
      },
      "statistics": "{{ steps.calculate_statistics.outputs }}",
      "insights": "{{ steps.generate_insights.outputs }}",
      "processing": {
        "start_time": "{{ state.processing_start_time }}",
        "end_time": "{{ state.processing_end_time }}"
      }
    }