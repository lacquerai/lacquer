version: "1.0"
metadata:
  name: error-handling-retries
  description: Test workflow for error handling and retry mechanisms
  author: lacquer-team

agents:
  unreliable_agent:
    provider: anthropic
    model: claude-3-5-sonnet-20241022
    temperature: 0
    system_prompt: You are an assistant that sometimes encounters issues but tries to help anyway.

workflow:
  inputs:
    attempt_count:
      type: number
      description: Which attempt this is (for testing retries)
      default: 1
    
    failure_mode:
      type: string
      description: Type of failure to simulate
      default: "intermittent"

  state:
    retry_attempts: 0
    error_log: []

  steps:
    - id: flaky_script_step
      run: |
        #!/bin/bash
        attempt="$1"
        mode="$2"
        
        # Simulate different failure scenarios
        case "$mode" in
          "always_fail")
            echo "ERROR: This step always fails" >&2
            exit 1
            ;;
          "intermittent")
            if [ "$attempt" -eq 1 ]; then
              echo "ERROR: First attempt failed" >&2
              exit 1
            elif [ "$attempt" -eq 2 ]; then
              echo "ERROR: Second attempt also failed" >&2
              exit 1
            else
              echo '{"success": true, "message": "Finally succeeded on attempt '$attempt'", "attempts_needed": '$attempt'}'
            fi
            ;;
          "success_after_two")
            if [ "$attempt" -le 2 ]; then
              echo "ERROR: Attempt $attempt failed" >&2
              exit 1
            else
              echo '{"success": true, "message": "Succeeded after 2 failures", "final_attempt": '$attempt'}'
            fi
            ;;
          "timeout_simulation")
            if [ "$attempt" -eq 1 ]; then
              echo "Starting long operation..." >&2
              sleep 10  # This will likely timeout
              echo '{"success": true, "message": "Long operation completed"}'
            else
              echo '{"success": true, "message": "Quick operation on retry", "attempt": '$attempt'}'
            fi
            ;;
          *)
            echo '{"success": true, "message": "No failure mode, succeeded immediately"}'
            ;;
        esac
      with:
        attempt: "{{ inputs.attempt_count }}"
        mode: "{{ inputs.failure_mode }}"
      retry:
        max_attempts: 3
        backoff: exponential
        initial_delay: 1s
        max_delay: 5s
      timeout: 3s
      on_error:
        - log: "Step failed with error: {{ error }}"
          fallback: "continue"
      updates:
        retry_attempts: "{{ state.retry_attempts + 1 }}"
        error_log: "{{ state.error_log + ['flaky_script_step failed on attempt ' + string(state.retry_attempts + 1)] }}"
      outputs:
        success:
          type: boolean
          description: Whether the step succeeded
        message:
          type: string
          description: Success or failure message
        attempts_needed:
          type: number
          description: Number of attempts needed

    - id: agent_with_retries
      agent: unreliable_agent
      prompt: |
        Please analyze this scenario: {{ inputs.failure_mode }}
        
        This is attempt number {{ inputs.attempt_count }}.
        
        Provide a brief analysis of what might be happening and suggest a solution.
        Respond in JSON format:
        {
          "analysis": "your analysis here",
          "solution": "suggested solution",
          "confidence": "high/medium/low"
        }
      retry:
        max_attempts: 2
        backoff: linear
        initial_delay: 500ms
      timeout: 10s
      on_error:
        - log: "Agent step failed: {{ error }}"
          output:
            analysis: "Error occurred during analysis"
            solution: "Retry the operation"
            confidence: "low"
      outputs:
        analysis:
          type: string
          description: Analysis of the situation
        solution:
          type: string
          description: Suggested solution
        confidence:
          type: string
          description: Confidence level

    - id: recovery_step
      run: |
        #!/bin/bash
        prev_success="$1"
        error_count="$2"
        
        if [ "$prev_success" = "true" ]; then
          echo '{
            "recovery_status": "no_recovery_needed",
            "message": "Previous step succeeded",
            "error_count": '$error_count'
          }'
        else
          echo '{
            "recovery_status": "recovery_attempted", 
            "message": "Attempting to recover from previous failures",
            "error_count": '$error_count',
            "recovery_action": "fallback_to_default_values"
          }'
        fi
      with:
        prev_success: "{{ steps.flaky_script_step.outputs.success or false }}"
        error_count: "{{ len(state.error_log) }}"
      outputs:
        recovery_status:
          type: string
          description: Status of recovery attempt
        message:
          type: string
          description: Recovery message
        error_count:
          type: number
          description: Total number of errors encountered
        recovery_action:
          type: string
          description: Action taken for recovery

    - id: error_summary
      run: |
        #!/bin/bash
        total_retries="$1"
        error_log="$2"
        recovery_status="$3"
        
        echo '{
          "total_retry_attempts": '$total_retries',
          "errors_encountered": "'$error_log'",
          "final_recovery_status": "'$recovery_status'",
          "workflow_completion": "completed_with_error_handling",
          "lessons_learned": [
            "Retry mechanisms help with transient failures",
            "Error logging provides visibility into issues", 
            "Recovery steps can provide fallback behavior"
          ]
        }'
      with:
        total_retries: "{{ state.retry_attempts }}"
        error_log: "{{ join(state.error_log, '; ') }}"
        recovery_status: "{{ steps.recovery_step.outputs.recovery_status }}"
      outputs:
        total_retry_attempts:
          type: number
          description: Total number of retry attempts
        errors_encountered:
          type: string
          description: Summary of errors
        final_recovery_status:
          type: string
          description: Final recovery status
        workflow_completion:
          type: string
          description: How the workflow completed
        lessons_learned:
          type: array
          description: Lessons learned from error handling

  outputs:
    error_handling_summary: "{{ steps.error_summary.outputs }}"
    final_retry_count: "{{ state.retry_attempts }}"
    error_history: "{{ state.error_log }}"
    step_results: {
      "flaky_step": "{{ steps.flaky_script_step.outputs }}",
      "agent_step": "{{ steps.agent_with_retries.outputs }}",
      "recovery": "{{ steps.recovery_step.outputs }}"
    }
    workflow_resilience: "Workflow completed despite {{ len(state.error_log) }} errors through retry and recovery mechanisms"