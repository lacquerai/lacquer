version: "1.0"
metadata:
  name: complex-templates
  description: Test workflow for complex template rendering and variable interpolation
  author: lacquer-team

workflow:
  inputs:
    user_data:
      type: object
      description: User data for template processing
      default:
        name: "John Doe"
        age: 30
        preferences: ["reading", "coding", "hiking"]
        location:
          city: "San Francisco"
          country: "USA"
    
    multiplier:
      type: number
      description: Multiplier for calculations
      default: 2.5

  state:
    processed_items: []
    calculations: {}
    iteration_count: 0

  steps:
    - id: extract_user_info
      run: |
        #!/bin/bash
        name="$1"
        age="$2"
        city="$3"
        country="$4"
        
        echo "{
          \"formatted_name\": \"$name\",
          \"age_group\": \"$(if [ $age -lt 25 ]; then echo 'young'; elif [ $age -lt 50 ]; then echo 'middle'; else echo 'senior'; fi)\",
          \"location_string\": \"$city, $country\",
          \"profile_id\": \"$(echo $name | tr ' ' '_' | tr '[:upper:]' '[:lower:]')_$age\",
          \"preferences_count\": 3
        }"
      with:
        name: "{{ inputs.user_data.name }}"
        age: "{{ inputs.user_data.age }}"
        city: "{{ inputs.user_data.location.city }}"
        country: "{{ inputs.user_data.location.country }}"
      updates:
        processed_items: "{{ state.processed_items + [steps.extract_user_info.outputs.profile_id] }}"
        iteration_count: "{{ state.iteration_count + 1 }}"
      outputs:
        formatted_name:
          type: string
          description: Formatted user name
        age_group:
          type: string
          description: Age group classification
        location_string:
          type: string
          description: Formatted location
        profile_id:
          type: string
          description: Generated profile ID
        preferences_count:
          type: number
          description: Number of preferences

    - id: process_preferences
      run: |
        #!/bin/bash
        # Simulate processing each preference
        prefs=("reading" "coding" "hiking")
        result="["
        for i in "${!prefs[@]}"; do
          pref="${prefs[$i]}"
          score=$((($i + 1) * 10))
          if [ $i -eq $((${#prefs[@]} - 1)) ]; then
            result="$result{\"preference\": \"$pref\", \"score\": $score, \"index\": $i}"
          else
            result="$result{\"preference\": \"$pref\", \"score\": $score, \"index\": $i},"
          fi
        done
        result="$result]"
        
        echo "{
          \"processed_preferences\": $result,
          \"total_score\": 60,
          \"favorite\": \"coding\"
        }"
      updates:
        processed_items: "{{ state.processed_items + ['preferences_processed'] }}"
        iteration_count: "{{ state.iteration_count + 1 }}"
      outputs:
        processed_preferences:
          type: array
          description: Processed preferences with scores
        total_score:
          type: number
          description: Total preference score
        favorite:
          type: string
          description: Highest scored preference

    - id: calculate_complex_values
      run: |
        #!/bin/bash
        age="$1"
        multiplier="$2"
        pref_score="$3"
        
        age_times_multiplier=$(echo "$age * $multiplier" | bc -l)
        combined_score=$(echo "$pref_score + $age_times_multiplier" | bc -l)
        percentage=$(echo "scale=2; $combined_score / 200 * 100" | bc -l)
        
        echo "{
          \"age_calculation\": $age_times_multiplier,
          \"combined_score\": $combined_score,
          \"percentage\": $percentage,
          \"calculation_timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
        }"
      with:
        age: "{{ inputs.user_data.age }}"
        multiplier: "{{ inputs.multiplier }}"
        pref_score: "{{ steps.process_preferences.outputs.total_score }}"
      updates:
        calculations: "{{ steps.calculate_complex_values.outputs }}"
        processed_items: "{{ state.processed_items + ['calculations_done'] }}"
        iteration_count: "{{ state.iteration_count + 1 }}"
      outputs:
        age_calculation:
          type: number
          description: Age multiplied by multiplier
        combined_score:
          type: number
          description: Combined score calculation
        percentage:
          type: number
          description: Percentage calculation
        calculation_timestamp:
          type: string
          description: When calculation was performed

    - id: create_nested_template
      run: |
        #!/bin/bash
        profile_id="$1"
        location="$2"
        age_group="$3"
        favorite_pref="$4"
        combined_score="$5"
        
        echo "{
          \"user_profile\": {
            \"id\": \"$profile_id\",
            \"details\": {
              \"location\": \"$location\",
              \"demographic\": \"$age_group\",
              \"interests\": {
                \"primary\": \"$favorite_pref\",
                \"engagement_score\": $combined_score
              }
            },
            \"metadata\": {
              \"created_at\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
              \"data_version\": \"1.0\"
            }
          },
          \"summary\": \"Profile $profile_id from $location with $age_group demographic, interested in $favorite_pref\"
        }"
      with:
        profile_id: "{{ steps.extract_user_info.outputs.profile_id }}"
        location: "{{ steps.extract_user_info.outputs.location_string }}"
        age_group: "{{ steps.extract_user_info.outputs.age_group }}"
        favorite_pref: "{{ steps.process_preferences.outputs.favorite }}"
        combined_score: "{{ steps.calculate_complex_values.outputs.combined_score }}"
      outputs:
        user_profile:
          type: object
          description: Complete user profile
        summary:
          type: string
          description: Profile summary

  outputs:
    # Template using nested object access
    user_full_name: "{{ inputs.user_data.name }}"
    user_city: "{{ inputs.user_data.location.city }}"
    user_preferences: "{{ inputs.user_data.preferences }}"
    first_preference: "{{ inputs.user_data.preferences[0] }}"
    
    # Template using step outputs
    generated_profile_id: "{{ steps.extract_user_info.outputs.profile_id }}"
    calculated_percentage: "{{ steps.calculate_complex_values.outputs.percentage }}"
    
    # Template using state variables
    processing_history: "{{ state.processed_items }}"
    total_iterations: "{{ state.iteration_count }}"
    final_calculations: "{{ state.calculations }}"
    
    # Complex template expressions
    personalized_greeting: "Hello {{ inputs.user_data.name }} from {{ inputs.user_data.location.city }}! Your profile {{ steps.extract_user_info.outputs.profile_id }} shows you're in the {{ steps.extract_user_info.outputs.age_group }} age group with a combined score of {{ steps.calculate_complex_values.outputs.combined_score }}."
    
    # Conditional templates
    age_message: "{{ inputs.user_data.age >= 30 ? 'You are an experienced adult' : 'You are a young adult' }}"
    location_type: "{{ inputs.user_data.location.country == 'USA' ? 'domestic' : 'international' }}"
    
    # Array length and manipulation
    preference_count: "{{ len(inputs.user_data.preferences) }}"
    has_preferences: "{{ len(inputs.user_data.preferences) > 0 }}"
    
    # Complete nested profile
    complete_profile: "{{ steps.create_nested_template.outputs.user_profile }}"
    profile_summary: "{{ steps.create_nested_template.outputs.summary }}"