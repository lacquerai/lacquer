# Workflow demonstrating conditional execution and branching logic
version: "1.0"
metadata:
  name: conditional-logic-demo
  description: Shows various conditional patterns and branching strategies
  author: lacquer-team

agents:
  classifier:
    model: gpt-4
    provider: openai
    temperature: 0.2
    system_prompt: You are a content classifier that categorizes and rates content.
  
  processor:
    model: gpt-4
    provider: openai
    temperature: 0.5
    system_prompt: You process content based on its category and requirements.
  
  reviewer:
    model: gpt-4
    provider: openai
    temperature: 0.3
    system_prompt: You review and validate processed content for quality.

workflow:
  inputs:
    content:
      type: string
      description: Content to process
      required: true
    
    priority:
      type: string
      description: Processing priority
      enum: ["low", "medium", "high", "critical"]
      default: "medium"
    
    auto_approve:
      type: boolean
      description: Whether to auto-approve high-quality content
      default: false

  steps:
    # Step 1: Classify the content
    - id: classify_content
      agent: classifier
      prompt: |
        Classify this content and rate its quality:
        
        Content: {{ inputs.content }}
        
        Provide:
        1. Category (news, blog, technical, marketing, other)
        2. Quality score (1-10)
        3. Content type (informational, promotional, educational, entertainment)
        4. Complexity level (basic, intermediate, advanced)
        5. Estimated processing time in minutes
        6. Any content warnings or flags
      outputs:
        category: string
        quality_score: integer
        content_type: string
        complexity: string
        processing_time: integer
        warnings: array
    
    # Step 2: Route based on priority (switch statement example)
    - id: priority_routing
      switch:
        on: "{{ inputs.priority }}"
        cases:
          critical:
            # Critical priority - process immediately with senior agent
            agent: processor
            prompt: |
              CRITICAL PRIORITY PROCESSING
              
              Content: {{ inputs.content }}
              Category: {{ steps.classify_content.outputs.category }}
              Quality: {{ steps.classify_content.outputs.quality_score }}/10
              
              Apply expedited processing with maximum quality standards.
              Ignore normal time constraints.
            outputs:
              result: string
              processing_method: string
          
          high:
            # High priority - enhanced processing
            agent: processor
            prompt: |
              HIGH PRIORITY - Enhanced Processing
              
              Content: {{ inputs.content }}
              Apply enhanced quality checks and thorough processing.
              Quality score: {{ steps.classify_content.outputs.quality_score }}
            outputs:
              result: string
              processing_method: string
          
          medium:
            # Standard processing path
            agent: processor
            prompt: |
              Standard processing for: {{ inputs.content }}
              Category: {{ steps.classify_content.outputs.category }}
            outputs:
              result: string
              processing_method: string
          
          default:  # low priority
            # Basic processing only
            agent: processor
            prompt: |
              Basic processing: {{ inputs.content }}
              Keep it simple and efficient.
            outputs:
              result: string
              processing_method: string
    
    # Step 3: Quality-based conditional processing
    - id: quality_enhancement
      condition: "{{ steps.classify_content.outputs.quality_score < 7 }}"
      agent: processor
      prompt: |
        The content quality score is {{ steps.classify_content.outputs.quality_score }}.
        This is below our threshold of 7. Please enhance:
        
        Original: {{ inputs.content }}
        Processed: {{ steps.priority_routing.outputs.result }}
        
        Apply quality improvements while maintaining the original intent.
      outputs:
        enhanced_result: string
        improvements_made: array
    
    # Step 4: Content warnings check
    - id: handle_warnings
      condition: "{{ steps.classify_content.outputs.warnings | length > 0 }}"
      agent: reviewer
      prompt: |
        Content has warnings that need attention:
        {{ steps.classify_content.outputs.warnings | join('\n- ') }}
        
        Content: {{ steps.quality_enhancement.outputs.enhanced_result | default(steps.priority_routing.outputs.result) }}
        
        Please review and provide mitigation strategies.
      outputs:
        mitigation_plan: string
        safe_for_publication: boolean
        modified_content: string
    
    # Step 5: Complex conditional - approval workflow
    - id: approval_decision
      # Multiple conditions combined
      condition: |
        {{
          inputs.priority in ['high', 'critical'] and 
          steps.classify_content.outputs.quality_score >= 8 and
          (steps.handle_warnings.outputs.safe_for_publication | default(true))
        }}
      agent: reviewer
      prompt: |
        Content meets criteria for potential auto-approval:
        - Priority: {{ inputs.priority }}
        - Quality: {{ steps.classify_content.outputs.quality_score }}/10
        - Safe: {{ steps.handle_warnings.outputs.safe_for_publication | default(true) }}
        - Auto-approve setting: {{ inputs.auto_approve }}
        
        Final content: {{ steps.handle_warnings.outputs.modified_content | default(steps.quality_enhancement.outputs.enhanced_result | default(steps.priority_routing.outputs.result)) }}
        
        Make approval recommendation.
      outputs:
        approved: boolean
        approval_reason: string
    
    # Step 6: Human review for complex cases
    - id: human_review
      # Only trigger if not auto-approved or has specific conditions
      condition: |
        {{
          not (steps.approval_decision.outputs.approved | default(false)) or
          steps.classify_content.outputs.complexity == 'advanced' or
          steps.classify_content.outputs.warnings | length > 2
        }}
      action: human_input
      prompt: |
        Human review required for this content:
        
        Original: {{ inputs.content }}
        Processed: {{ steps.priority_routing.outputs.result }}
        
        Classification:
        - Category: {{ steps.classify_content.outputs.category }}
        - Quality: {{ steps.classify_content.outputs.quality_score }}/10
        - Complexity: {{ steps.classify_content.outputs.complexity }}
        - Priority: {{ inputs.priority }}
        
        {% if steps.classify_content.outputs.warnings | length > 0 %}
        Warnings:
        {{ steps.classify_content.outputs.warnings | join('\n- ') }}
        {% endif %}
        
        {% if steps.quality_enhancement.outputs %}
        Quality enhancements made:
        {{ steps.quality_enhancement.outputs.improvements_made | join('\n- ') }}
        {% endif %}
        
        Please approve or request changes:
      timeout: 1h
      outputs:
        human_approved: boolean
        human_feedback: string
    
    # Step 7: Final status determination
    - id: determine_final_status
      agent: reviewer
      prompt: |
        Determine final processing status based on all conditions:
        
        Auto-approval: {{ steps.approval_decision.outputs.approved | default(false) }}
        Human approval: {{ steps.human_review.outputs.human_approved | default('not_required') }}
        Quality score: {{ steps.classify_content.outputs.quality_score }}
        Priority: {{ inputs.priority }}
        Has warnings: {{ steps.classify_content.outputs.warnings | length > 0 }}
        
        Provide final status and reasoning.
      outputs:
        final_status: string
        status_reason: string
    
    # Step 8: Conditional notifications based on outcome
    - id: send_notifications
      parallel:
        steps:
          # Critical items always get immediate notification
          - id: critical_notification
            condition: "{{ inputs.priority == 'critical' }}"
            agent: processor
            prompt: "Send critical priority notification for processed content"
          
          # Failed approvals get escalation
          - id: escalation_notification
            condition: "{{ steps.determine_final_status.outputs.final_status == 'rejected' }}"
            agent: processor
            prompt: "Send escalation notification for rejected content"
          
          # Success notifications for approved high-quality content
          - id: success_notification
            condition: |
              {{
                steps.determine_final_status.outputs.final_status == 'approved' and
                steps.classify_content.outputs.quality_score >= 8
              }}
            agent: processor
            prompt: "Send success notification for high-quality approved content"

  # Outputs demonstrating conditional logic
  outputs:
    # Primary outputs
    final_content: |
      {{
        steps.handle_warnings.outputs.modified_content |
        default(steps.quality_enhancement.outputs.enhanced_result |
        default(steps.priority_routing.outputs.result))
      }}
    
    final_status: "{{ steps.determine_final_status.outputs.final_status }}"
    
    # Conditional outputs
    quality_enhanced: "{{ steps.quality_enhancement.outputs is defined }}"
    had_warnings: "{{ steps.classify_content.outputs.warnings | length > 0 }}"
    required_human_review: "{{ steps.human_review.outputs is defined }}"
    
    # Processing metadata
    processing_path: |
      {{
        {
          'priority_level': inputs.priority,
          'auto_approved': steps.approval_decision.outputs.approved | default(false),
          'human_reviewed': steps.human_review.outputs is defined,
          'quality_enhanced': steps.quality_enhancement.outputs is defined,
          'warnings_handled': steps.handle_warnings.outputs is defined
        }
      }}
    
    # Approval chain
    approval_chain:
      classification: "{{ steps.classify_content.outputs }}"
      auto_decision: "{{ steps.approval_decision.outputs | default({}) }}"
      human_decision: "{{ steps.human_review.outputs | default({}) }}"
      final_decision: "{{ steps.determine_final_status.outputs }}"
    
    # Summary statistics
    total_processing_time: |
      {{
        steps.classify_content.outputs.processing_time +
        (steps.quality_enhancement.outputs is defined ? 15 : 0) +
        (steps.human_review.outputs is defined ? 60 : 0)
      }}
    
    recommendations: |
      {{
        'Consider auto-approval for this content type' if steps.classify_content.outputs.quality_score >= 9
        else 'Standard processing is appropriate' if steps.classify_content.outputs.quality_score >= 7
        else 'Quality improvements recommended'
      }}