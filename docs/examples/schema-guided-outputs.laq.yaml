version: 1.0

metadata:
  name: Schema-Guided Output Parsing Demo
  description: Demonstrates robust output parsing with JSON schema guidance
  author: Lacquer Team

agents:
  analyzer:
    model: claude-3-5-sonnet-20241022
    provider: anthropic
    temperature: 0.3
    system_prompt: |
      You are a thorough data analyst who provides structured, accurate responses.
      Always respond with valid JSON when requested to match a specific schema.

  classifier:
    model: gpt-4
    provider: openai
    temperature: 0.1
    system_prompt: |
      You are a content classifier that categorizes and scores text content.
      Provide precise, structured outputs in the requested format.

workflow:
  inputs:
    document:
      type: string
      description: "Document content to analyze"
      required: true

  steps:
    # Simple structured output
    - id: basic_analysis
      agent: analyzer
      prompt: |
        Analyze this document: {{ inputs.document }}
        
        Provide your analysis results.
      outputs:
        summary: string
        word_count: integer
        language: string
        complexity_score:
          type: number
          minimum: 0
          maximum: 10

    # Complex nested output with validation
    - id: detailed_classification
      agent: classifier
      prompt: |
        Classify this document: {{ inputs.document }}
        
        Categorize it across multiple dimensions.
      outputs:
        primary_category:
          type: string
          enum: ["technical", "business", "creative", "educational", "news"]
        
        confidence_scores:
          type: object
          description: "Confidence scores for each category"
          properties:
            technical: number
            business: number
            creative: number
            educational: number
            news: number
        
        key_topics:
          type: array
          description: "Main topics identified"
          items: string
          minItems: 1
          maxItems: 5
        
        metadata:
          type: object
          description: "Additional metadata"
          properties:
            urgency:
              type: string
              enum: ["low", "medium", "high", "critical"]
            target_audience: string
            reading_time_minutes: integer
        
        requires_review:
          type: boolean
          description: "Whether manual review is needed"

    # Array output with specific structure
    - id: extract_entities
      agent: analyzer
      prompt: |
        Extract named entities from: {{ inputs.document }}
        
        Find people, organizations, and locations.
      outputs:
        entities:
          type: array
          description: "Extracted named entities"
          items:
            type: object
            properties:
              text: string
              type:
                type: string
                enum: ["person", "organization", "location", "other"]
              confidence:
                type: number
                minimum: 0
                maximum: 1
          minItems: 0
          maxItems: 20

    # Optional fields and constraints
    - id: content_scoring
      agent: classifier
      prompt: |
        Score this content across various quality metrics: {{ inputs.document }}
      outputs:
        overall_score:
          type: integer
          minimum: 1
          maximum: 100
        
        dimension_scores:
          type: object
          properties:
            clarity: integer
            accuracy: integer
            engagement: integer
            completeness: integer
        
        strengths:
          type: array
          items: string
          optional: true
        
        weaknesses:
          type: array
          items: string
          optional: true
        
        improvement_suggestions:
          type: string
          minLength: 20
          maxLength: 500
          optional: true

    # Final synthesis step using parsed outputs
    - id: generate_report
      agent: analyzer
      prompt: |
        Create a comprehensive analysis report based on these findings:
        
        Basic Analysis:
        - Summary: {{ steps.basic_analysis.outputs.summary }}
        - Word Count: {{ steps.basic_analysis.outputs.word_count }}
        - Complexity: {{ steps.basic_analysis.outputs.complexity_score }}/10
        
        Classification:
        - Category: {{ steps.detailed_classification.outputs.primary_category }}
        - Key Topics: {{ steps.detailed_classification.outputs.key_topics | join(', ') }}
        - Urgency: {{ steps.detailed_classification.outputs.metadata.urgency }}
        
        Quality Score: {{ steps.content_scoring.outputs.overall_score }}/100
        
        Entities Found: {{ steps.extract_entities.outputs.entities | length }}
        
        Generate a final executive summary.
      outputs:
        executive_summary:
          type: string
          minLength: 100
          maxLength: 1000
        
        key_insights:
          type: array
          items: string
          minItems: 3
          maxItems: 7
        
        recommendations:
          type: array
          description: "Actionable recommendations"
          items:
            type: object
            properties:
              action: string
              priority:
                type: string
                enum: ["low", "medium", "high"]
              estimated_effort: string
        
        next_steps:
          type: string
          description: "Suggested next steps"

  outputs:
    analysis_complete: true
    
    comprehensive_report:
      summary: "{{ steps.generate_report.outputs.executive_summary }}"
      category: "{{ steps.detailed_classification.outputs.primary_category }}"
      score: "{{ steps.content_scoring.outputs.overall_score }}"
      insights: "{{ steps.generate_report.outputs.key_insights }}"
      recommendations: "{{ steps.generate_report.outputs.recommendations }}"
    
    quality_metrics:
      word_count: "{{ steps.basic_analysis.outputs.word_count }}"
      complexity: "{{ steps.basic_analysis.outputs.complexity_score }}"
      overall_score: "{{ steps.content_scoring.outputs.overall_score }}"
      requires_review: "{{ steps.detailed_classification.outputs.requires_review }}"